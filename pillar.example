# -*- coding: utf-8 -*-
# vim: ft=yaml ts=2 sts=2 sw=2 et

### The Zoomdata provisioning configuration example file
### ====================================================
###
### This is Salt Pillar file written in SaltStack's (SLS) format:
### a tree-like data structure in YAML rendered with Jinja2 templating engine.
### https://docs.saltstack.com/en/latest/topics/tutorials/pillar.html
### https://docs.saltstack.com/en/latest/topics/yaml/
### https://docs.saltstack.com/en/latest/topics/jinja/
###
### It has default values for latest Generally Available Zoomdata release.
### The settings for the last Long Term Supported release are coded within the
### formula in the ``zoomdata/defaults.yaml`` file, which applies out of the
### box unless redefined in the Pillar file.

zoomdata:
  ## Package installation settings
  #
  # Repository base URL where Zoomdata packages are hosted.
  # This would be overridden if ``ZOOMDATA_REPOSITORY`` environment variable
  # has been set for ``salt-minion`` process or ``salt-call`` command (in
  # masterless mode).
  base_url: 'http://repo.zoomdata.com'
  # URL to the GnuPG public key for the repo/pkgs verification.
  # Put ``None`` or empty string to skip GnuPG check (for internal repos).
  gpgkey: 'https://repo.zoomdata.com/ZOOMDATA-GPG-KEY.pub'
  # Repository branch from which the packages would be installed.
  # This would be overridden by ``ZOOMDATA_RELEASE`` environment variable.
  release: 3.7

  # Additional repositories under the ``base_url`` to get packages from
  repositories:
    # The branch "microservices" is deprecated in the Zoomdata repository
    # starting from version 2.6.6. All packages have been moved under "stable"
    # component of the main repository.
    #- microservices
    - tools

  # Release repository components to enable and install packages from
  components:
    - stable
    #- unstable

  # Enforce the state defined by configured Pillar values or provided defaults.
  # Setting it to ``False`` changes the formula behaviour to "relaxed
  # configuration management mode": detect installed packages and
  # running services with only upgrading or restarting them if needed.
  # Please note that it would not take effect during the first time
  # provisioning until all configured services would be started.
  enforce: True

  # Remove Zoomdata services which HAVE NOT explicitly defined here or in the
  # defaults. If set ``False``, remove all specified (or default) packages and
  # disable corresponding services when manually calling ``zoomdata.remove``
  # state.
  erase: False

  # Exact version of Zoomdata core packages to install, use ``latest``
  # keyword to always upgrade to the latest minor version in the release.
  # This would be overridden by ``ZOOMDATA_VERSION`` environment variable.
  {%- if grains['os'] == 'Ubuntu' %}
  # Ubuntu-specific version template: EDIT NUMBERS BEFORE curly braces!
  #version: "3.7.0-3+{{ grains['oscodename'] }}.stable"
  {%- else %}
  # Packages version for RHEL/CentOS systems
  #version: '3.7.0'
  {%- endif %}

  # Zoomdata core packages to install
  packages:
    - zoomdata
    - zoomdata-consul
    - zoomdata-query-engine
    - zoomdata-scheduler
    # The X framebuffer was deprecated in Zoomdata 3.1 release
    #- zoomdata-xvfb

  # Zoomdata EDC section
  edc:
    # Exact version of Zoomdata EDC packages to install, use ``latest``
    # keyword to always upgrade to the latest minor version in the release.
    # This would be overridden by ``ZOOMDATA_EDC_VERSION`` environment variable.
    {%- if grains['os'] == 'Ubuntu' %}
    # Ubuntu-specific version template: EDIT NUMBERS BEFORE curly braces!
    #version: "3.7.0-2+{{ grains['oscodename'] }}.stable"
    {%- else %}
    # Packages version for RHEL/CentOS systems
    #version: '3.7.0'
    {%- endif %}

    # Zoomdata EDC (datasource connector) packages to install
    packages:
      - zoomdata-edc-apache-solr
      # The Amazon Aurora connector was deprecated in Zoomdata 2.6.2
      #- zoomdata-edc-aurora
      - zoomdata-edc-cloudera-search
      # The ElasticSearch 1.7 connector was deprecated in Zoomdata 2.6.1
      #- zoomdata-edc-elasticsearch-1.7
      # The ElasticSearch 2.0 connector was deprecated in Zoomdata 2.6.5
      #- zoomdata-edc-elasticsearch-2.0
      - zoomdata-edc-elasticsearch-5.0
      # The ElasticSearch 6.0 connector was added in Zoomdata 2.6.3
      - zoomdata-edc-elasticsearch-6.0
      # The generic Hive connector was added in Zoomdata 3.7.0 version.
      # COMMENT OUT FOR EARLIER RELEASES. Use the ``zoomdata-edc-tez`` package.
      - zoomdata-edc-hive
      - zoomdata-edc-impala
      - zoomdata-edc-memsql
      - zoomdata-edc-mongo
      - zoomdata-edc-mssql
      - zoomdata-edc-mysql
      - zoomdata-edc-oracle
      - zoomdata-edc-phoenix-4.7-queryserver
      - zoomdata-edc-postgresql
      - zoomdata-edc-redshift
      - zoomdata-edc-rts
      - zoomdata-edc-sparksql
      # The Hive-on-Tez connector was deprecated in Zoomdata 3.7.0
      #- zoomdata-edc-tez

    # Install JDBC jar drivers which are not packaged with Zoomdata connectors.
    # More here: https://www.zoomdata.com/docs/3/Topics/Installation/adding-a-jdbc-driver.html
    # This is an example for MySQL connector (``zoomdata-edc-mysql``):
    #jdbc:
      #drivers:
        #mysql:
          #- 'https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.13/mysql-connector-java-8.0.13.jar'

    # Do the similar for other connectors which require external drivers.
    # To actually make it work, set ``install`` to ``True``:
      #install: True

  # Zoomdata microservices section
  microservices:
    # Exact version of Zoomdata microservice packages to install, use ``latest``
    # keyword to always upgrade to the latest minor version in the release.
    # This would be overridden by ``ZOOMDATA_EDC_VERSION`` environment variable.
    {%- if grains['os'] == 'Ubuntu' %}
    # Ubuntu-specific version template: EDIT NUMBERS BEFORE curly braces!
    #version: "3.7.0-1+{{ grains['oscodename'] }}.stable"
    {%- else %}
    # Packages version for RHEL/CentOS systems
    #version: '3.7.0'
    {%- endif %}

    # Zoomdata microservice packages to install
    packages:
      # New screenshot service was introduced in Zoomdata 3.1 release
      - zoomdata-screenshot-service
      # The Stream Writer service was renamed in Zoomdata 3.2 release
      #- zoomdata-stream-writer
      - zoomdata-stream-writer-postgresql
      - zoomdata-upload-service
      # The Admin Server based on Spring Boot Admin was added in
      # Zoomdata 3.5 release. This is optional and disabled by default.
      #- zoomdata-admin-server
      # The Tracing Service based on OpenZipkin is available since
      # Zoomdata 3.4 release. This is optional and disabled by default.
      # If you previously have installed ``zoomdata-tracing`` package, you have
      # to remove it manually before uncommenting the line below.
      #- zoomdata-tracing-server

  tools:
    # Exact version of Zoomdata Tools packages to install, use ``latest``
    # keyword to always upgrade to the latest version.
    {%- if grains['os'] == 'Ubuntu' %}
    # Ubuntu-specific version template: EDIT NUMBERS BEFORE dash ('-') sign
    #version: "1.0.0-1+{{ grains['oscodename'] }}.stable"
    {%- else %}
    # Packages version for RHEL/CentOS systems
    #version: '1.0.0-1'
    {%- endif %}
    packages:
      - zoomdata-zdmanage

  ## Configuration settings
  #
  # Global system limits for Zoomdata user (per-service limits for systemd based OS):
  # https://www.zoomdata.com/docs/3/Topics/Installation/configure_maxOpenProcFiles.html
  #limits:
  #  nproc:
  #    soft: '4096'
  #    hard: '4096'
  #  nofile:
  #    soft: '1048576'
  #    hard: '1048576'

  # Environment variables per service.
  #environment:
    # Zoomdata Server
    #zoomdata:
    #  path: '/etc/zoomdata/zoomdata.env'
    #  variables:
    #    DISCOVERY_REGISTRY_HOST: 'localhost'
    #    ACTIVITY_LOGGING_UNIFIED: 'true'
    #    LOGGING_UNIFIED_HOST: 'localhost'
    #    LOGGING_UNIFIED_LEVEL: 'INFO'
    # Zoomdata Query Engine
    #zoomdata-query-engine:
    #  path: '/etc/zoomdata/query-engine.env'
    #  variables:
    #    DISCOVERY_REGISTRY_HOST: 'localhost'
    #    SPARK_MASTER: spark://localhost:7077
    # Zoomdata Scheduler
    #zoomdata-scheduler:
    #  path: '/etc/zoomdata/scheduler.env'
    #  variables:
    #    DISCOVERY_REGISTRY_HOST: 'localhost'
    #    LOGGING_UNIFIED_HOST: 'localhost'
    #    LOGGING_UNIFIED_LEVEL: 'INFO'

  # Configuration property files and their corresponding variables:
  # https://www.zoomdata.com/docs/3/Topics/Config/config_props_vars.html
  config:
    # Zoomdata Web Server
    zoomdata:
      path: '/etc/zoomdata/zoomdata.properties'
      properties:
        ## Metadata DB connection details.
        # (REMEMBER TO CHANGE VALUES BELOW IN ``postgres`` SECTION ACCORDINGLY!)
        spring.datasource.url: 'jdbc:postgresql://localhost:5432/zoomdata'
        spring.datasource.username: 'zoomdata'
        spring.datasource.password: 'PleaseChangeMe'
        # Keyset database credentials. Required for Zoomdata versions starting
        # from 2.6.4-1.
        keyset.destination.params.jdbc_url: 'jdbc:postgresql://localhost:5432/zoomdata-keyset'
        keyset.destination.params.user_name: 'zoomdata'
        keyset.destination.params.password: 'PleaseChangeMe'
        keyset.destination.schema: 'public'
        # Stream Writer credentials for saving Upload Service data
        upload.destination.params.jdbc_url: 'jdbc:postgresql://localhost:5432/zoomdata-upload'
        upload.destination.params.user_name: 'zoomdata'
        upload.destination.params.password: 'PleaseChangeMe'
        upload.destination.schema: 'public'
        upload.batch-size: 1000
        ## Screenshot Feature: we disable it by default.
        # Look at these pages for instructions how to set it up on your platform:
        # https://www.zoomdata.com/docs/3/Topics/Installation/screenshot-for-rpm.html
        #screenshot.daemon.enabled: False
        #screenshot.daemon.schedule.rate: '24h'  # 1 day
        #screenshots.dashboards.enabled: False
        #screenshots.datasource-charts.enabled: False
        ## Configure HTTPS for Zoomdata (see ``tls`` item below):
        # https://www.zoomdata.com/docs/3/Topics/Security/adding-ssl-certificate-to-the-zoomdata-server.html
        #server.ssl.enabled: True
        #server.ssl.enabled-protocols: 'TLSv1.2'
        #server.ssl.key-store: '/etc/zoomdata/zoomdata.jks'
        #server.ssl.key-store-password: 'your_keystore_password'
        # Optional redirect to https scheme, this requires HAProxy (see below)
        # ATTENTION: this is deprecated in Zoomdata 2.6.2!
        #http.redirect.port: '443'
        ## Web Server Content Security Policy (CSP):
        # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors
        http.response.header.content-security-policy.frame-ancestors: 'self'
        # Zoomdata Admin Service (Spring Boot Admin) related settings.
        # This requires running ``zoomdata-admin-server`` service and valid user
        # credentials set in Zoomdata after the first launch.
        #actuator.user.name: 'admin'
        #actuator.user.password: 'password'
        #actuator.logging.external-file: '/opt/zoomdata/logs/zoomdata.log'
      # Merge properties with hard-coded defaults. This is useful to skip
      # common configuration values. Set ``False`` to disable such behavior.
      merge: True
      # Update the properties with ones given above. Do not remove locally
      # modified properties. This is ``False`` by default (always replace).
      update: False
      # When updating the properties (set ``update: True``), discard locally
      # modified properties with the same names (keys), literally update them
      # all. Set ``False`` if you would like to keep local modifications, but
      # add some options from above.
      discard: True
    # Zoomdata Query Engine
    #zoomdata-query-engine:
      ## JVM options to start the service with
      #options:
        ## This is a mandatory JVM option
        #- server
        ## Java memory limits:
        ## https://www.zoomdata.com/docs/3/Topics/Config/configuring-memory.html
        #- Xms1g
        ## You have 32 GiB of RAM and you want Zoomdata to be lightning fast
        #- Xmx20g
        #- XX:NewRatio=3
        #- XX:+UseConcMarkSweepGC
        #- XX:+HeapDumpOnOutOfMemoryError
        #- XX:HeapDumpPath=temp/query-engine-dump
        #- Djava.io.tmpdir=temp/query-engine
        #- Dlog.console.level=OFF
        #- Dlogback.console=OFF
        #- Dfile.encoding=UTF-8
        #- Duser.timezone=GMT
        #- Dquery.engine.application.mode=default
    # Zoomdata Scheduler
    zoomdata-scheduler:
      path: '/etc/zoomdata/scheduler.properties'
      properties:
        # Metadata DB connection details.
        # (REMEMBER TO CHANGE VALUES BELOW IN ``postgres`` SECTION ACCORDINGLY!)
        spring.datasource.url: 'jdbc:postgresql://localhost:5432/zoomdata-scheduler'
        spring.datasource.username: 'zoomdata'
        spring.datasource.password: 'PleaseChangeMe'
      #merge: True
      #update: False
      #discard: True
    # Zoomdata Admin Server.
    # Uncomment the section below to set up the user credentials for accessing
    # the web UI.
    #zoomdata-admin-server:
    #  path: '/etc/zoomdata/admin-server.properties'
    #  properties:
    #    monitor.user.name: 'admin'
    #    monitor.user.password: 'admin'
    # Zoomdata Screenshot Service.
    # This is an example of setting default timeouts for dashboards to render.
    #zoomdata-screenshot-service:
    #  path: '/etc/zoomdata/screenshot-service.properties'
    #  properties:
    #    screenshot.webdriver.timeout: 30
    #    export.dashboard.screenshot.timeout.seconds: 60
    #    # Google ChromeDriver options:
    #    driver.options: '--headless,--disable-gpu,--hide-scrollbars,--no-sandbox,--allow-insecure-localhost'
    # Zoomdata Tracing Server.
    # The example configuration below allows saving traces into locally
    # installed ElasticSearch.
    #zoomdata-tracing-server:
    #  path: '/etc/zoomdata/tracing-server.properties'
    #  properties:
    #    zipkin.storage.type: 'elasticsearch'
    #    zipkin.storage.elasticsearch.hosts: 'http://localhost:9200'

  # Zoomdata TLS: paste certificates chain and private key for your domain here.
  # Pay attention to indent exactly with 4 spaces for all lines under
  # ``certificate`` and ``key`` items.
  #tls:
  #  name: 'www.example.com'
  #  certificate: |
  #      -----BEGIN CERTIFICATE-----
  #      MIIXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #      -----END CERTIFICATE-----
  #  key: |
  #      -----BEGIN PRIVATE KEY-----
  #      MIIXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #      -----END PRIVATE KEY-----

  # Run post installation commands for each defined service before actually
  # starting it
  post_install:
    zoomdata-screenshot-service:
      # Install operating system specific packages, which the Screenshot
      # Service depends on
      - /opt/zoomdata/docs/screenshot-service/install-dependencies.sh

  # Services to enable and start in order
  services:
    - zoomdata-consul  # always start it first

    # The Tracing Service based on OpenZipkin is available since Zoomdata 3.4
    # release. This is optional and disabled by default.
    # If you previously have installed ``zoomdata-tracing`` package, you have
    # to remove it manually before uncommenting the line below.
    #- zoomdata-tracing-server

    # EDC (Enterprise Data Connector) services. Some of them are commented out
    # due to licensed drivers not included into the distribution. Uncomment them
    # after you have installed proper driver library file (see above).
    - zoomdata-edc-apache-solr
    # The Amazon Aurora connector was deprecated in Zoomdata 2.6.2
    #- zoomdata-edc-aurora
    - zoomdata-edc-cloudera-search
    # The ElasticSearch 1.7 connector was deprecated in Zoomdata 2.6.1
    #- zoomdata-edc-elasticsearch-1.7
    # The ElasticSearch 2.0 connector was deprecated in Zoomdata 2.6.5
    #- zoomdata-edc-elasticsearch-2.0
    - zoomdata-edc-elasticsearch-5.0
    # The ElasticSearch 6.0 connector was added in Zoomdata 2.6.3
    - zoomdata-edc-elasticsearch-6.0
    # The generic Hive connector is going to be added in Zoomdata 3.7.0
    # COMMENT OUT FOR EARLIER RELEASES. Use the ``zoomdata-edc-tez`` package.
    - zoomdata-edc-hive
    - zoomdata-edc-impala
    #- zoomdata-edc-memsql
    - zoomdata-edc-mongo
    #- zoomdata-edc-mssql
    #- zoomdata-edc-mysql
    #- zoomdata-edc-oracle
    - zoomdata-edc-phoenix-4.7-queryserver
    - zoomdata-edc-postgresql
    #- zoomdata-edc-redshift
    - zoomdata-edc-rts
    - zoomdata-edc-sparksql
    # The Hive-on-Tez connector was deprecated in Zoomdata 3.7.0
    #- zoomdata-edc-tez

    # Former "microservices". These are flat file support services, i.e. used
    # to create CSV/JSON-based data sources. They require that the
    # ``zoomdata-edc-postgresql`` service must be up and running.
    # The Stream Writer service was renamed in Zoomdata 3.2 release.
    #- zoomdata-stream-writer
    - zoomdata-stream-writer-postgresql
    - zoomdata-upload-service

    # The X framebuffer was deprecated in Zoomdata 3.1 release. New screenshot
    # service was introduced instead.
    #- zoomdata-xvfb
    - zoomdata-screenshot-service

    # Zoomdata core
    - zoomdata-query-engine
    - zoomdata-scheduler

    # The admin service based on Spring Boot Admin is available since
    # Zoomdata 3.5 release. This is optional and disabled by default.
    #- zoomdata-admin-server

    # Zoomdata Server starts last
    - zoomdata

  # Perform additional post-installation setup
  #setup:
  #  # How much time to wait in seconds until Zoomdata server would start to
  #  # respond on API calls.
  #  timeout: 900
  #  # Configure users for accessing Zoomdata web interface. Setting passwords
  #  # for admin/supervisor is allowed only once after initial installation.
  #  # The keyword ``random`` or empty value means generate random passwords and
  #  # print them out as a ``Comment`` during the state run.
  #  # All other setting below require ``supervisor`` user password set here.
  #  passwords:
  #    admin: random
  #    supervisor: random
  #  # Customize Zoomdata UI by providing CSS, login image and JSON file
  #  branding:
  #    css: salt://branding/files/custom.css
  #    login_logo: salt://branding/files/Zoomdata.svg
  #    file: salt://zoomdata/files/custom-ui-payload-sample.json
  #  # Configure available connectors (connections to data sources).
  #  connectors:
  #    RFS_CSV: False
  #    STREAMING_API: False
  #  # Obtain Zoomdata license key from URL and install it into the server
  #  license:
  #    URL: 'http://licensing.server/api'
  #    expirationDate: Null
  #    licenseType: 'ZD'
  #    userCount: '1'
  #    concurrentUserCount: '1'
  #    enforcementLevel: 'AT'
  #  # Configure server level variables (supervisor toggles)
  #  toggles:
  #    custom-charts-enabled: False
  #    hide-tile-provider: False

  # Backup PostgreSQL databases which used by following services as
  # metadata and persistent cache storage before upgrades.
  # The dumps will be stored locally on machine running Zoomdata.
  # These settings are applicable for ``zoomdata.backup`` states.
  backup:
    services:
      # Specifying the services is mandatory for backups to be made.
      # These services are expected to have open databdase connections and
      # would be stopped prior to making a backup.
      - zoomdata
      - zoomdata-scheduler
    # Use to define which databases need to be backed up from the services
    # above. It requires you to have those services defined.
    # Defaults to all.
    # Set to ``Null`` if you do not want to make any database backups.
    #databases:
      #- zoomdata
      #- zoomdata-keyset
      #- zoomdata-scheduler
      #- zoomdata-upload
    # Dump installation metadata in YAML (SLS) file that could be used as
    # a source for Salt Pillar configuration, just like this file.
    state: '99-backup'
    # Where to put backup files. If not set or empty, there would be
    # no backups.
    destination: /opt/zoomdata/data/backups
    # Create subdirectories under ``destination`` named as timestamps in
    # specified format (Python's ``datetime.strptime``).
    strptime: '%y-%m-%d_%H:%M:%S'
    # How many recent backups to keep. Setting ``all`` means ALL!
    retention: 10
    # The PostgreSQL dump command with options to run on Zoomdata databases
    bin: pg_dump --no-password --clean --if-exists --create
    # Compress the dump file with following tool. Default is ``gzip``.
    # Also supported compressors are: ``pigz``, ``[p]bzip2`` and ``[p]xz``.
    compressor: pxz
    # Additional command line options to use on compress/decompress
    comp_opts: --threads {{ salt['status.nproc']() }}
    # Extension or suffix to append to compressed dump file names.
    # Better to align it with compression format defined above.
    comp_ext: '_postgre.sql.xz'

  # Use these settings to restore from previously made backup. They work only
  # when the ``backup`` section above has defined and valid values.
  # Apply the ``zoomdata.restore`` states to make restoration to local or
  # remote PostgreSQL cluster.
  restore:
    # The PostgreSQL client binary with options if needed. The full path may
    # be required for custom installations, i.e. ``/usr/pgsql-9.5/bin/psql``.
    # Connection command line options for remote servers could be specified
    # here as well.
    bin: psql
    # The client will connect to a PostgreSQL cluster with default
    # authentication for this user. Usually it is ``peer`` authentication type
    # on localhost. For other authentication options against remote servers,
    # set ``root`` or ``Null`` here and look for relevant settings below.
    # Also, this user would have group write permissions to the backup
    # directory created. The group name must match the user name set here.
    user: postgres
    # The directory where Zoomdata service databases dumps are located
    #dir: /opt/zoomdata/data/backups/18-01-31_12:01:08


### PostgreSQL configuration for postgres-formula
#
# Salt Minion settings. PROVIDE ONLY FOR REMOTE POSTGRESQL CLUSTER.
# These options are intended to be configured only when connecting to the
# cluster being provisioned elsewhere, not the same machine that runs
# Zoomdata. The ``peer`` authentication for ``postgres`` system user will be
# used to access PostgreSQL server via local socket by default.
# The user specified here should have administrative permissions to create
# ROLES and DATABASES on given host. It is mandatory to specify at least
# ``postgres.host`` and ``postgres.pass`` for backup restoration to work.
#postgres.host: 'localhost'
#postgres.port: '5432'
#postgres.user: 'postgres'
#postgres.pass: ''
#postgres.maintenance_db: 'postgres'

# Comment out the whole section to disable PostgreSQL installation and
# configuration (depends on targeting set in the states ``top.sls`` file).
# In that case, consider to configure the options above.
postgres:
  # Create Zoomdata user and set password for the first time.
  users:
    zoomdata:
      ensure: present
      default_password: 'PleaseChangeMe'

  # Create databases for Zoomdata services
  databases:
    zoomdata:
      owner: 'zoomdata'
    zoomdata-keyset:
      owner: 'zoomdata'
    zoomdata-scheduler:
      owner: 'zoomdata'
    zoomdata-upload:
      owner: 'zoomdata'

  # Backup extension for configuration files, defaults to ``.bak``.
  # Set ``False`` to stop creation of backups when config files change.
  config_backup: ".backup@{{ salt['status.time']('%y-%m-%d_%H:%M:%S') }}"

  # Append the lines under this item to your postgresql.conf file.
  # Pay attention to indent exactly with 4 spaces for all lines.
  #postgresconf: |
  #  listen_addresses = '*'  # listen on all interfaces

  # This section covers ACL management in the `pg_hba.conf` file.
  # acls list controls: which hosts are allowed to connect, how clients
  # are authenticated, which PostgreSQL user names they can use, which
  # databases they can access.
  #
  # If ``acls`` item value is empty ('', [], null), then the contents of
  # ``pg_hba.conf`` file will not be touched at all.
  #acls:
  #  # "local" is for Unix domain socket connections only
  #  - ['local', 'all', 'all', 'peer']
  #  # IPv4 local connections:
  #  - ['host', 'all', 'all', '127.0.0.1/32', 'md5']
  #  # IPv6 local connections:
  #  - ['host', 'all', 'all', '::1/128', 'md5']


### HAproxy configuration
#
# Uncomment to enable forwarding from privileged ports to Zoomdata's binded
# ports: 80 --> 8080, 443 --> 8443
#haproxy:
#  global:
#    chroot:
#      enable: True
#      path: /var/lib/haproxy
#
#    maxconn: 4000
#    user: haproxy
#    group: haproxy
#
#    daemon: True
#
#    stats:
#      enable: True
#      socketpath: /var/lib/haproxy/stats
#
#  defaults:
#    mode: http
#    log: global
#    retries: 3
#    options:
#      - httplog
#      - dontlognull
#      - http-server-close
#      - forwardfor
#    timeouts:
#      - client  1m
#      - connect 10s
#      - server  1m
#      - tunnel  1h  # timeout to use with WebSocket and CONNECT
#
#  frontends:
#    zd-http:
#      bind: "*:80"
#      reqadds:
#        - "X-Forwarded-Proto:\\ http"
#      default_backend: zd-http-backend
#    zd-https:
#      bind: "*:443"
#      mode: tcp
#      default_backend: zd-https-backend
#
#  backends:
#    zd-http-backend:
#      servers:
#        zd-http:
#          host: 127.0.0.1
#          port: 8080
#          check: check
#    zd-https-backend:
#      mode: tcp
#      servers:
#        zd-https:
#          host: 127.0.0.1
#          port: 8443
#          check: check
