{% import_yaml 'zoomdata/defaults.yaml' as defaults %}
{% import_yaml 'zoomdata/osfamily_map.yaml' as osfamily_map %}

{# Merge Pillar items with defaults #}
{% set zoomdata = salt['grains.filter_by'](
    osfamily_map,
    grain='os_family',
    merge=salt['pillar.get']('zoomdata')|default({}, true),
    base='default',
) %}

{# Make sure EDC dict always exists #}
{% do zoomdata.update({
    'edc':      zoomdata.edc|default({}, true),
}) %}

{# Install our module to gather data #}
{% if salt['zoomdata.inspect']|default(none) is not callable %}
    {% do salt['saltutil.sync_modules']() %}
{% endif %}

{# Try to inspect local installation #}
{% do zoomdata.update({
    'local': salt['zoomdata.inspect'](versions=true)['zoomdata'],
}) %}

{# Make sure we have finished bootstrapping when some packages were
   already installed. #}
{% set packages = zoomdata.local['packages'] +
                  zoomdata.local.edc['packages'] %}
{% do zoomdata.update({
    'bootstrap': packages == [] or
                 salt['grains.get']('zoomdata:bootstrap', False),
}) %}

{% if not zoomdata['bootstrap'] and not zoomdata['enforce'] %}
    {# Bypass state enforcement: work only with locally installed and
       running services. #}
    {% do zoomdata.update({
        'packages': zoomdata.local['packages'],
        'services': zoomdata.local['services'],
    }) %}
    {% do zoomdata.edc.update({
        'packages': zoomdata.local.edc['packages']
    }) %}
{% endif %}

{# Read envrionment variables #}
{% do zoomdata.update({
    'base_url': salt['environ.get']('ZOOMDATA_REPOSITORY', zoomdata.base_url),
    'release':  salt['environ.get']('ZOOMDATA_RELEASE', zoomdata.release),
    'version':  salt['environ.get']('ZOOMDATA_VERSION', zoomdata.get('version')),
    'packages': salt['environ.get']('ZOOMDATA_PACKAGES', zoomdata.get('packages')),
    'services': salt['environ.get']('ZOOMDATA_SERVICES', zoomdata.get('services')),
}) %}

{% do zoomdata.edc.update({
    'packages': salt['environ.get']('ZOOMDATA_EDC_PACKAGES', zoomdata.edc.get('packages')),
    'version':  salt['environ.get']('ZOOMDATA_EDC_VERSION', zoomdata.edc.get('version')),
}) %}

{# Fix short names for Zoomdata sevices and connectors by appending
   approptiate prefix to each package and service defined via environment
   variable. #}
{% for group, prefix in ((none, 'zoomdata'), ('edc', 'zoomdata-edc')) %}
    {% for item in ('packages', 'services') %}
        {% set map = zoomdata.get(group, zoomdata) %}
        {% if map.get(item) is string %}
            {% set items = map[item].split(',') %}
            {% set srvs = [] %}
            {% for srv in items %}
                {% if srv and not srv.startswith(prefix) %}
                    {% do srvs.append(prefix ~ '-' ~ srv) %}
                {% elif srv %}
                    {% do srvs.append(srv) %}
                {% endif %}
            {% endfor %}
            {% set param = {item: srvs} %}
            {% if group %}
                {% do zoomdata[group].update(param) %}
            {% else %}
                {% do zoomdata.update(param) %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endfor %}

{% for params in ('backup', 'restore') %}
    {% if zoomdata[params] is not mapping %}
        {# Reload defaults if nested dictionary with parameters is messy #}
        {% do zoomdata.update({params: defaults.zoomdata[params]}) %}
    {% endif %}
{% endfor %}

{# Process properties #}
{% for service, config in zoomdata.config|default({}, true)|dictsort() %}
    {% if config.properties|default({}, true) and not config['merge']|default(true) %}
        {# Drop default properties if we don't want to merge them #}
        {% set properties = salt['pillar.get']('zoomdata:config:' ~ service ~ ':properties', {}) %}
        {% do zoomdata.config[service].update({'properties': properties}) %}
    {% endif %}

    {% if config['update']|default(false) %}
        {% set local_config = zoomdata.local.config[service]|default({}, true) %}
        {% set local_properties = local_config.properties|default({}, true) %}
        {% set properties = zoomdata.config[service].properties|default({}, true) %}
        {% if config['discard']|default(true) %}
            {# Read local properties and update them with provided values #}
            {% do local_properties.update(properties) %}
            {% do zoomdata.config[service].update({'properties': local_properties}) %}
        {% else %}
            {# Filter out default or Pillar provided properties and only add new ones #}
            {% do properties.update(local_properties) %}
            {% do zoomdata.config[service].update({'properties': properties}) %}
        {% endif %}
    {% endif %}
{% endfor %}

{# Hard-code of some PostgreSQL authentication property names
   and expose administrative credentials for running raw ``psql`` command. #}
{% set postgres = {
    'properties': (
        (
            'spring.datasource.url',
            'spring.datasource.username',
            'spring.datasource.password'
        ),
        (
            'keyset.destination.params.jdbc_url',
            'keyset.destination.params.user_name',
            'keyset.destination.params.password',
        ),
        (
            'upload.destination.params.jdbc_url',
            'upload.destination.params.user_name',
            'upload.destination.params.password'
        ),
    ),
    'connection_uri': none,
    'user': salt['config.option']('postgres.user', 'postgres'),
    'password': salt['config.option']('postgres.pass'),
} %}

{% set pg_host = salt['config.option']('postgres.host') %}
{% set pg_port = salt['config.option']('postgres.port', 5432) %}
{% set pg_db = salt['config.option']('postgres.maintenance_db', 'postgres') %}

{% if pg_host %}
    {% do postgres.update({
        'connection_uri': 'postgresql://' ~ pg_host ~ ':' ~ pg_port ~ '/' ~ pg_db,
    }) %}
{% endif %}

{# Detect if we are using real init or building some image #}
{% set init_available = grains['init'] != 'unknown' %}
